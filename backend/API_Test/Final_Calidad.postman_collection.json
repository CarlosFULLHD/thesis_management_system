{
	"info": {
		"_postman_id": "5261a31c-2f03-472c-b6eb-d213a9cc5abc",
		"name": "Final Calidad",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17533763"
	},
	"item": [
		{
			"name": "Natalia Gutierrez",
			"item": [
				{
					"name": "LogIn",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"username\", \"DOCENTE UCB\");",
									"pm.environment.set(\"password\", \"1234\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has all keys\", function() {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.keys([\"username\", \"message\", \"status\", \"jwt\"]);",
									"});",
									"",
									"pm.test(\"Authentication status is true\", function() {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.be.true;",
									"});",
									"",
									"pm.test(\"JWT token is present\", function() {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.jwt).to.be.a('string');",
									"});",
									"",
									"pm.test(\"Login Successful and Save JWT\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"DOCENTE UCB\"); // Verifica que el username sea el correcto",
									"    if (jsonData.username === \"DOCENTE UCB\") {",
									"        pm.environment.set(\"username\", jsonData.username); // Guarda el username en el entorno",
									"        pm.environment.set(\"jwt\", jsonData.jwt); // Guarda el JWT en el entorno",
									"        console.log(\"JWT saved in environment: \" + jsonData.jwt);",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "1234",
									"type": "string"
								},
								{
									"key": "username",
									"value": "DOCENTE UCB",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"DOCENTE UCB\",\n  \"password\": \"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users/log-in",
							"host": [
								"{{url}}users"
							],
							"path": [
								"log-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Userid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains users\", function() {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.data).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"pm.test(\"Username from environment exists and save userId\", function() {",
									"    let jsonData = pm.response.json();",
									"    let usernameFromEnv = pm.environment.get(\"username\");",
									"    let user = jsonData.result.data.find(user => user.username === usernameFromEnv);",
									"    pm.expect(user).to.not.be.undefined;",
									"    if (user) {",
									"        pm.environment.set(\"userIdDOCENTEUCB\", user.userId);",
									"        console.log(\"Saved userId for \" + usernameFromEnv + \": \" + user.userId);",
									"    }",
									"});",
									"",
									"pm.test(\"Check role of the user\", function() {",
									"    let jsonData = pm.response.json();",
									"    let usernameFromEnv = pm.environment.get(\"username\");",
									"    let user = jsonData.result.data.find(user => user.username === usernameFromEnv);",
									"    pm.expect(user.role).to.eql(\"DOCENTE\");",
									"});",
									"",
									"pm.test(\"Check if saved userId is correct\", function() {",
									"    let savedUserId = pm.environment.get(\"userIdDOCENTEUCB\");",
									"    pm.expect(savedUserId).to.be.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}users",
							"host": [
								"{{url}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List students/tutor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expected keys\", function() {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.keys([\"timeStamp\", \"status\", \"message\", \"result\"]);",
									"    pm.expect(jsonData.result).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each item has all required keys\", function() {",
									"    let jsonData = pm.response.json();",
									"    jsonData.result.forEach(function(item) {",
									"        pm.expect(item).to.have.keys([\"idTutorApplication\", \"roleHasPersonIdRolePer\", \"gradeProfileIdGradePro\", \"isAccepted\", \"tutorLecturer\", \"status\", \"createdAt\"]);",
									"        pm.expect(item.roleHasPersonIdRolePer).to.have.keys([\"idRolePer\", \"rolesIdRole\", \"usersIdUsers\", \"status\", \"createdAt\"]);",
									"        pm.expect(item.gradeProfileIdGradePro).to.have.keys([\"idGradePro\", \"roleHasPerson\", \"title\", \"statusGraduationMode\", \"isGradeoneortwo\", \"status\", \"createdAt\"]);",
									"    });",
									"});",
									"",
									"pm.test(\"Validate specific user details\", function() {",
									"    let jsonData = pm.response.json();",
									"    let found = false; ",
									"    jsonData.result.forEach(function(item) {",
									"        if (item.gradeProfileIdGradePro && item.gradeProfileIdGradePro.roleHasPerson && item.gradeProfileIdGradePro.roleHasPerson.usersIdUsers) {",
									"            let user = item.gradeProfileIdGradePro.roleHasPerson.usersIdUsers;",
									"            if (user.username === \"derek\") {",
									"                found = true;",
									"                pm.expect(user.username).to.eql(\"derek\");  // Verifica que el nombre de usuario sea 'derek'",
									"            }",
									"        }",
									"    });",
									"",
									"    // Verificamos que efectivamente encontramos al usuario 'derek'",
									"    pm.expect(found, \"User 'derek' was not found in the results\").to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Check roles and statuses\", function() {",
									"    let jsonData = pm.response.json();",
									"    jsonData.result.forEach(function(item) {",
									"        pm.expect(item.roleHasPersonIdRolePer.rolesIdRole.userRole).to.eql(\"DOCENTE\");",
									"        pm.expect(item.roleHasPersonIdRolePer.status).to.eql(1);",
									"        pm.expect(item.gradeProfileIdGradePro.roleHasPerson.rolesIdRole.userRole).to.eql(\"ESTUDIANTE\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Se verifica que el token JWT está disponible y se añade a los headers de la solicitud",
									"if (pm.environment.get(\"jwt\")) {",
									"    pm.request.headers.add({",
									"        key: 'Authorization',",
									"        value: 'Bearer ' + pm.environment.get(\"jwt\")",
									"    });",
									"    console.log('JWT found, login Successful');",
									"} else {",
									"    console.log('JWT not found, please login and set the JWT token first');",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}lecturer/student-tutor?idUsers={{userIdDOCENTEUCB}}",
							"host": [
								"{{url}}lecturer"
							],
							"path": [
								"student-tutor"
							],
							"query": [
								{
									"key": "idUsers",
									"value": "{{userIdDOCENTEUCB}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fernanda Gutierrez",
			"item": [
				{
					"name": "Edit User Teaching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response body has message property with specific value\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Detalles del usuario actualizados exitosamente\");",
									"});",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"});",
									"",
									"pm.test(\"Response body is a valid JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ci\": \"879465\",\n    \"name\": \"DOCENTE\",\n    \"fatherLastName\": \"UCB\",\n    \"motherLastName\": \"LA PAZ\",\n    \"description\": \"DOCENTE\",\n    \"email\": \"docente01@ucb.edu.bo\",\n    \"cellPhone\": \"71544312\",\n    \"imageUrl\": \"https://media.licdn.com/dms/image/v2/C4E12AQEVO-ZAozxJ3Q/article-cover_image-shrink_600_2000/article-cover_image-shrink_600_2000/0/1534479718033?e=2147483647&v=beta&t=z3RS3dt0YimYl03ygPzYQcr08N__7J8BflwUHLByZMw\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}users/update/{{userIdDOCENTEUCB}}",
							"host": [
								"{{url}}users"
							],
							"path": [
								"update",
								"{{userIdDOCENTEUCB}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cristopher Olivera",
			"item": [
				{
					"name": "Create new task with cloud space",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has all required properties\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    // Verificar propiedades de nivel raíz\r",
									"    pm.expect(jsonData).to.have.property(\"timeStamp\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData).to.have.property(\"result\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"result\"\r",
									"    let result = jsonData.result;\r",
									"    pm.expect(result).to.have.property(\"task\");\r",
									"    pm.expect(result).to.have.property(\"urls\");\r",
									"    pm.expect(result).to.have.property(\"meeting\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"task\"\r",
									"    let task = result.task;\r",
									"    pm.expect(task).to.have.property(\"idTask\");\r",
									"    pm.expect(task).to.have.property(\"taskStatesIdTaskState\");\r",
									"    pm.expect(task).to.have.property(\"academicHasGradeProfileIdAcadGrade\");\r",
									"    pm.expect(task).to.have.property(\"titleTask\");\r",
									"    pm.expect(task).to.have.property(\"task\");\r",
									"    pm.expect(task).to.have.property(\"feedback\");\r",
									"    pm.expect(task).to.have.property(\"orderIs\");\r",
									"    pm.expect(task).to.have.property(\"isUrl\");\r",
									"    pm.expect(task).to.have.property(\"isMeeting\");\r",
									"    pm.expect(task).to.have.property(\"isStudentOrTutor\");\r",
									"    pm.expect(task).to.have.property(\"publicationDate\");\r",
									"    pm.expect(task).to.have.property(\"deadline\");\r",
									"    pm.expect(task).to.have.property(\"status\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"taskStatesIdTaskState\"\r",
									"    let taskState = task.taskStatesIdTaskState;\r",
									"    pm.expect(taskState).to.have.property(\"idTaskState\");\r",
									"    pm.expect(taskState).to.have.property(\"description\");\r",
									"    pm.expect(taskState).to.have.property(\"status\");\r",
									"    pm.expect(taskState).to.have.property(\"createdAt\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"academicHasGradeProfileIdAcadGrade\"\r",
									"    let academicGrade = task.academicHasGradeProfileIdAcadGrade;\r",
									"    pm.expect(academicGrade).to.have.property(\"idAcadGrade\");\r",
									"    pm.expect(academicGrade).to.have.property(\"gradeProfileIdGradePro\");\r",
									"    pm.expect(academicGrade).to.have.property(\"academicPeriodIdAcad\");\r",
									"    pm.expect(academicGrade).to.have.property(\"status\");\r",
									"    pm.expect(academicGrade).to.have.property(\"createdAt\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"gradeProfileIdGradePro\"\r",
									"    let gradeProfile = academicGrade.gradeProfileIdGradePro;\r",
									"    pm.expect(gradeProfile).to.have.property(\"idGradePro\");\r",
									"    pm.expect(gradeProfile).to.have.property(\"roleHasPerson\");\r",
									"    pm.expect(gradeProfile).to.have.property(\"title\");\r",
									"    pm.expect(gradeProfile).to.have.property(\"statusGraduationMode\");\r",
									"    pm.expect(gradeProfile).to.have.property(\"isGradeoneortwo\");\r",
									"    pm.expect(gradeProfile).to.have.property(\"status\");\r",
									"    pm.expect(gradeProfile).to.have.property(\"createdAt\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"roleHasPerson\"\r",
									"    let rolePerson = gradeProfile.roleHasPerson;\r",
									"    pm.expect(rolePerson).to.have.property(\"idRolePer\");\r",
									"    pm.expect(rolePerson).to.have.property(\"rolesIdRole\");\r",
									"    pm.expect(rolePerson).to.have.property(\"usersIdUsers\");\r",
									"    pm.expect(rolePerson).to.have.property(\"status\");\r",
									"    pm.expect(rolePerson).to.have.property(\"createdAt\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"rolesIdRole\"\r",
									"    let role = rolePerson.rolesIdRole;\r",
									"    pm.expect(role).to.have.property(\"idRole\");\r",
									"    pm.expect(role).to.have.property(\"userRole\");\r",
									"    pm.expect(role).to.have.property(\"status\");\r",
									"    pm.expect(role).to.have.property(\"createdAt\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"usersIdUsers\"\r",
									"    let user = rolePerson.usersIdUsers;\r",
									"    pm.expect(user).to.have.property(\"idUsers\");\r",
									"    pm.expect(user).to.have.property(\"personIdPerson\");\r",
									"    pm.expect(user).to.have.property(\"username\");\r",
									"    pm.expect(user).to.have.property(\"password\");\r",
									"    pm.expect(user).to.have.property(\"salt\");\r",
									"    pm.expect(user).to.have.property(\"status\");\r",
									"    pm.expect(user).to.have.property(\"createdAt\");\r",
									"\r",
									"    // Verificar propiedades dentro de \"personIdPerson\"\r",
									"    let person = user.personIdPerson;\r",
									"    pm.expect(person).to.have.property(\"idPerson\");\r",
									"    pm.expect(person).to.have.property(\"ci\");\r",
									"    pm.expect(person).to.have.property(\"name\");\r",
									"    pm.expect(person).to.have.property(\"fatherLastName\");\r",
									"    pm.expect(person).to.have.property(\"motherLastName\");\r",
									"    pm.expect(person).to.have.property(\"description\");\r",
									"    pm.expect(person).to.have.property(\"email\");\r",
									"    pm.expect(person).to.have.property(\"cellPhone\");\r",
									"    pm.expect(person).to.have.property(\"status\");\r",
									"    pm.expect(person).to.have.property(\"createdAt\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response properties have correct data types\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    // Verificar tipos de datos de las propiedades de nivel raíz\r",
									"    pm.expect(jsonData.timeStamp).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.result).to.be.an(\"object\");\r",
									"\r",
									"    // Verificar tipos de datos dentro de \"result\"\r",
									"    let result = jsonData.result;\r",
									"    pm.expect(result.task).to.be.an(\"object\");\r",
									"    pm.expect(result.urls).to.satisfy(value => value === null || typeof value === \"object\");\r",
									"    pm.expect(result.meeting).to.satisfy(value => value === null || typeof value === \"object\");\r",
									"\r",
									"    // Verificar tipos de datos dentro de \"task\"\r",
									"    let task = result.task;\r",
									"    pm.expect(task.idTask).to.be.a(\"number\");\r",
									"    pm.expect(task.taskStatesIdTaskState).to.be.an(\"object\");\r",
									"    pm.expect(task.academicHasGradeProfileIdAcadGrade).to.be.an(\"object\");\r",
									"    pm.expect(task.titleTask).to.be.a(\"string\");\r",
									"    pm.expect(task.task).to.be.a(\"string\");\r",
									"    pm.expect(task.feedback).to.be.a(\"string\");\r",
									"    pm.expect(task.orderIs).to.be.a(\"number\");\r",
									"    pm.expect(task.isUrl).to.be.a(\"number\");\r",
									"    pm.expect(task.isMeeting).to.be.a(\"number\");\r",
									"    pm.expect(task.isStudentOrTutor).to.be.a(\"number\");\r",
									"    pm.expect(task.publicationDate).to.be.a(\"string\");\r",
									"    pm.expect(task.deadline).to.be.a(\"string\");\r",
									"    pm.expect(task.status).to.be.a(\"number\");\r",
									"\r",
									"    // Verificar tipos de datos en propiedades anidadas...\r",
									"    // (Continúa similar a los ejemplos anteriores)\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain unexpected properties\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    const expectedRootKeys = [\"timeStamp\", \"status\", \"message\", \"result\"];\r",
									"    const expectedResultKeys = [\"task\", \"urls\", \"meeting\"];\r",
									"    const expectedTaskKeys = [\"idTask\", \"taskStatesIdTaskState\", \"academicHasGradeProfileIdAcadGrade\", \"titleTask\", \"task\", \"feedback\", \"orderIs\", \"isUrl\", \"isMeeting\", \"isStudentOrTutor\", \"publicationDate\", \"deadline\", \"status\"];\r",
									"\r",
									"    // Validar claves en cada nivel...\r",
									"    Object.keys(jsonData).forEach(key => pm.expect(expectedRootKeys).to.include(key));\r",
									"    Object.keys(jsonData.result || {}).forEach(key => pm.expect(expectedResultKeys).to.include(key));\r",
									"    Object.keys(jsonData.result.task || {}).forEach(key => pm.expect(expectedTaskKeys).to.include(key));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"task\": {\r\n    \"academicHasGradeProfileIdAcadGrade\": {\r\n      \"gradeProfileIdGradePro\": {\r\n        \"idGradePro\": 1\r\n      }\r\n    },\r\n    \"titleTask\": \"Test Task\",\r\n    \"task\": \"Test\",\r\n    \"isUrl\": 1,\r\n    \"isMeeting\": 0,\r\n    \"publicationDate\": \"2024-04-10T10:31:00\",\r\n    \"deadline\": \"2024-04-11T12:31:01\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}task/",
							"host": [
								"{{url}}task"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Nilmar Lutino",
			"item": [
				{
					"name": "New Professor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar valores dinámicos para las variables de entorno\r",
									"const random = Math.floor(Math.random() * 100000);\r",
									"\r",
									"pm.environment.set(\"ci\", (6000000 + random).toString());\r",
									"pm.environment.set(\"nombre\", `User${random}`);\r",
									"pm.environment.set(\"apellidoPaterno\", `LastName${random}`);\r",
									"pm.environment.set(\"apellidoMaterno\", `SecondName${random}`);\r",
									"pm.environment.set(\"correoInstitucional\", `user${random}@ucb.edu.bo`);\r",
									"pm.environment.set(\"numeroCelular\", (60000000 + random).toString());\r",
									"\r",
									"// Obtener el body con las variables reemplazadas\r",
									"const requestBody = pm.variables.replaceIn(pm.request.body.raw);\r",
									"const parsedBody = JSON.parse(requestBody); // Aquí es suficiente con un solo JSON.parse\r",
									"\r",
									"// Validar que todos los campos requeridos están presentes\r",
									"pm.test(\"Todos los campos requeridos están presentes en el body antes de la solicitud\", function () {\r",
									"    pm.expect(parsedBody).to.have.property(\"ci\");\r",
									"    pm.expect(parsedBody).to.have.property(\"name\");\r",
									"    pm.expect(parsedBody).to.have.property(\"fatherLastName\");\r",
									"    pm.expect(parsedBody).to.have.property(\"motherLastName\");\r",
									"    pm.expect(parsedBody).to.have.property(\"description\");\r",
									"    pm.expect(parsedBody).to.have.property(\"email\");\r",
									"    pm.expect(parsedBody).to.have.property(\"cellPhone\");\r",
									"});\r",
									"\r",
									"// Validar que los valores no estén vacíos\r",
									"pm.test(\"Los campos tienen valores válidos antes de la solicitud\", function () {\r",
									"    pm.expect(parsedBody.ci).to.not.be.empty;\r",
									"    pm.expect(parsedBody.name).to.not.be.empty;\r",
									"    pm.expect(parsedBody.fatherLastName).to.not.be.empty;\r",
									"    pm.expect(parsedBody.motherLastName).to.not.be.empty;\r",
									"    pm.expect(parsedBody.description).to.not.be.empty;\r",
									"    pm.expect(parsedBody.email).to.not.be.empty;\r",
									"    pm.expect(parsedBody.cellPhone).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Validar que el correo tiene el dominio @ucb.edu.bo\r",
									"pm.test(\"El correo tiene el dominio @ucb.edu.bo antes de enviar la solicitud\", function () {\r",
									"    const emailRegex = /^[^\\s@]+@ucb\\.edu\\.bo$/; \r",
									"    pm.expect(parsedBody.email).to.match(emailRegex);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar código de respuesta\r",
									"pm.test(\"Código de respuesta es 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Validar que el mensaje sea el esperado\r",
									"pm.test(\"Mensaje de respuesta correcto\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Registro exitoso. Por favor, revise su correo electrónico para obtener las instrucciones de inicio de sesión.\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ci\": \"{{ci}}\",\r\n  \"name\": \"{{nombre}}\",\r\n  \"fatherLastName\": \"{{apellidoPaterno}}\",\r\n  \"motherLastName\": \"{{apellidoMaterno}}\",\r\n  \"description\": \"docente\",\r\n  \"email\": \"{{correoInstitucional}}\",\r\n  \"cellPhone\": \"{{numeroCelular}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}professor/register",
							"host": [
								"{{url}}professor"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}